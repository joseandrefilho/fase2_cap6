import oracledb
import os
from dotenv import load_dotenv

# Carregar variáveis de ambiente do arquivo .env
load_dotenv()

def conectar_banco():
    """
    Estabelece a conexão com o banco de dados Oracle.
    """
    try:
        connection = oracledb.connect(
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD'),
            dsn=os.getenv('DB_DSN')
        )
        return connection
    except oracledb.Error as error:
        print(f"Erro ao conectar ao banco de dados: {error}")
        return None

def criar_cursor(connection):
    """
    Cria um cursor para executar comandos SQL.
    """
    try:
        cursor = connection.cursor()
        return cursor
    except oracledb.Error as error:
        print(f"Erro ao criar cursor: {error}")
        return None

def fechar_conexao(connection, cursor):
    """
    Fecha a conexão com o banco de dados.
    """
    if cursor:
        cursor.close()
    if connection:
        connection.close()

def criar_tabelas(cursor):
    """
    Verifica e cria as tabelas necessárias no banco de dados.
    """
    try:
        verificar_e_criar_tabela(cursor, 'CATEGORIAS', """
            CREATE TABLE categorias (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                nome VARCHAR2(255) NOT NULL,
                PRIMARY KEY (id)
            )
        """, [
            ('Fertilizantes',),
            ('Sementes',),
            ('Defensivos',),
            ('Rações',),
            ('Vacinas',),
            ('Medicamentos',),
            ('Equipamentos',),
            ('Embalagens',),
            ('Mudas',),
            ('Hormônios',)
        ], "INSERT INTO categorias (nome) VALUES (:1)")

        verificar_e_criar_tabela(cursor, 'UNIDADES_MEDIDA', """
            CREATE TABLE unidades_medida (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                nome VARCHAR2(50) NOT NULL,
                sigla VARCHAR2(10) NOT NULL,
                PRIMARY KEY (id)
            )
        """, [
            ('Quilograma', 'kg'),
            ('Litro', 'l'),
            ('Tonelada', 't'),
            ('Grama', 'g'),
            ('Mililitro', 'ml'),
            ('Unidade', 'un'),
            ('Metro', 'm'),
            ('Centímetro', 'cm'),
            ('Galão', 'gal'),
            ('Saco', 'sc')
        ], "INSERT INTO unidades_medida (nome, sigla) VALUES (:1, :2)")

        verificar_e_criar_tabela(cursor, 'INSUMOS', """
            CREATE TABLE insumos (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                nome VARCHAR2(255) NOT NULL,
                descricao VARCHAR2(255),
                id_categoria NUMBER NOT NULL,
                id_unidade_medida NUMBER NOT NULL,
                fornecedor VARCHAR2(255),
                data_validade DATE,
                estoque_atual NUMBER NOT NULL,
                estoque_minimo NUMBER NOT NULL,
                FOREIGN KEY (id_categoria) REFERENCES categorias(id),
                FOREIGN KEY (id_unidade_medida) REFERENCES unidades_medida(id),
                PRIMARY KEY (id)
            )
        """)

        verificar_e_criar_tabela(cursor, 'MOVIMENTACOES', """
            CREATE TABLE movimentacoes (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                id_insumo NUMBER NOT NULL,
                data DATE NOT NULL,
                tipo VARCHAR2(50) NOT NULL,
                quantidade NUMBER NOT NULL,
                observacao VARCHAR2(255),
                FOREIGN KEY (id_insumo) REFERENCES insumos(id),
                PRIMARY KEY (id)
            )
        """)

    except oracledb.Error as error:
        print(f"Erro ao criar tabelas: {error}")

def verificar_e_criar_tabela(cursor, nome_tabela, comando_criacao, dados_iniciais=None, comando_insercao=None):
    """
    Verifica se a tabela existe e a cria caso não exista.
    """
    cursor.execute(f"SELECT COUNT(*) FROM user_tables WHERE table_name = '{nome_tabela}'")
    if cursor.fetchone()[0] == 0:
        cursor.execute(comando_criacao)
        print(f"Tabela '{nome_tabela}' criada com sucesso!")
        if dados_iniciais and comando_insercao:
            cursor.executemany(comando_insercao, dados_iniciais)
            print(f"Dados inseridos na tabela '{nome_tabela}' com sucesso!")